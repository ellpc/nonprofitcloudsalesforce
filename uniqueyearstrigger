/**
 * @File Name          : UniqueYearsTrigger.cls
 * @Description        : Counting the number of years (or streak) a donor has given over a period of time is not built into Salesforce                            and its actually really difficult to achieve - conceptually and with SOQL Limit errors. This project was to                              calculate the number of years a donor has given over a period of time. In this case, 20.

 * @Author             : LPC
 * @Group              : 
 * @Last Modified By   : LPC
 * @Last Modified On   : 2/26/2020, 11:35:02 AM
 * @Modification Log   : 
 * Ver       Date    2/26/2020        Author      	LPC	    Modification
 * 1.3    2/26/2020   Initial Version
 Notes on the environment: 
 - You will need to create two opportunity contact role fields. One will be CloseDate and the other will be Fiscal_Year. You COULD 
 avoid this by doing a query of the opportunities as well - but that seemed a little unnecessary. 
 - CloseDate: Formula field - that looks up the close date of the related opportunity. 
 - Fiscal Year: Formula, Text field that calculates off the above CloseDate = TEXT(YEAR(DATEVALUE(CloseDate__c)))
 - There are a number of reasons I chose to put this on the Opportunity Contact Role Object, rather than the Opportunity/Contact/Account. 
 Known issue : when deleting an opportunity, it doesn't force an update - will add that in another iteration but there's a time constraint.
 **/
trigger CountUniqueYears20 on OpportunityContactRole (after insert,after update,after undelete){
    Set<String> contactIds = new set<String>();
   //For each affected role, check the contact Id - add it to the set.  
    for(OpportunityContactRole ocr : Trigger.new){
        contactIds.add(ocr.ContactId);
    } 
    List<AggregateResult> arList = [SELECT ContactId, COUNT_DISTINCT(Fiscal_Year__c) cnt
                                    FROM OpportunityContactRole
                                    WHERE ContactId In :contactIds
                                    AND ((CloseDate__c = LAST_N_Years:20) OR (CloseDate__c = THIS_YEAR))
                                    AND ((Role = 'Donor') OR (Role = 'Household Member') OR (Role = 'Soft Credit'))
                                    GROUP BY ContactId];
    //Create a map with the key being the contact ID & The new value is the year cnt from above.
    Map<Id, Decimal > resultMap = new Map<Id, Decimal>();
    //populate the map with the aggregate results
    if(arList.isEmpty() == FALSE){
        for(AggregateResult ar : arList){
            resultMap.put((Id)ar.get('ContactId'),(Decimal)ar.get('cnt'));
        }
        //create a list of contacts to update in bulk so we keep the queries low. Then update.
        List<Contact> yearsToUpdate = new List<Contact>();
        List<Contact> ecStatusUpdate = new List<Contact>();
        List<Task> tasksToInsert = new List<Task>();
 		Map <Id, Contact> contactList = new Map<Id, Contact>([SELECT Id, YOURNAME_Circle_Lapsed_Member__c, YOURNAME_Circle_Lapsed_Year__c, npsp__Deceased__c, Years_Donated_Last_20__c, YOURNAME_Circle_Induction_Year__c
                                                   FROM Contact
                                                   WHERE Id in :resultMap.keySet()]);
        for (Id key : resultMap.keySet()){
            Contact conG = new Contact(
                    	   Id = key,
                    	   Years_Donated_Last_20__c = (Integer)resultMap.get(key));
            yearsToUpdate.add(conG);
            Contact conS = contactList.get(key); 
            //this is for building the task & ec status list. 
            if((conS.Years_Donated_Last_20__c != resultMap.get(key)) && (conS.npsp__Deceased__c == FALSE)){   
                if((conS.Years_Donated_Last_20__c == 14) && (resultMap.get(key) == 15) && (conS.YOURNAME_Circle_Lapsed_Member__c == FALSE) && (conS.YOURNAME_Circle_Lapsed_Year__c == null)){
                    //they're a new member! add them to the task list and update induction year.
                    tasksToInsert.add(
                        new Task (
                            WhoID = key,
                            Subject = 'New YOURNAME Circle Member Induction!',
                            Status = 'Not Started',
                            Type = 'Donor Services'));
                    ecStatusUpdate.add(
                     	New Contact(
							Id = key,
                            YOURNAME_Circle_Induction_Year__c = system.today()));
                }
                else if(resultMap.get(key) >= 15 && conS.YOURNAME_Circle_Lapsed_Member__c == TRUE){
                    //they were re-inducted so unlapse them. Should we update induction year again?
                    tasksToInsert.add(
                        new Task (
                            WhoID = key,
                            Subject = 'Lapsed YOURNAME Member has Qualified Again!',
                            Status = 'Not Started',
                            Type = 'Donor Services'));
                    ecStatusUpdate.add(
                     	new Contact(
							Id = key,
                            YOURNAME_Circle_Lapsed_Member__c = FALSE));    
                }
                else if(resultmap.get(key)<= 14 && conS.YOURNAME_Circle_Lapsed_Member__c == FALSE && conS.Years_Donated_Last_20__c == 15){
                    //they're newly lapsed. check lapsed box, write lapsed date.
                    tasksToInsert.add(
                        new Task (
                            WhoID = key,
                            Subject = 'Lapsed YOURNAME Member!',
                            Status = 'Not Started',
                            Type = 'Donor Services'));
                    ecStatusUpdate.add(
                     	new Contact(
							Id = key,
                            YOURNAME_Circle_Lapsed_Member__c = TRUE,
                            YOURNAME_Circle_Lapsed_Year__c = system.today())); 
                }
                else{
                    system.debug('No elses +++');
                }
            }  
        }
        if(yearsToUpdate.size() > 0){
            update yearsToUpdate;
        }
        if(tasksToInsert.size() > 0){
            insert tasksToInsert;
        }
        if(ecStatusUpdate.size() >0){
            update ecStatusUpdate;
        } 
    }
}
