/**
 * @File Name          : UniqueYearsTrigger.cls
 * @Description        : Counting the number of years (or streak) a donor has given over a period of time is not built into Salesforce                            and its actually really difficult to achieve - conceptually and with SOQL Limit errors. This project was to                              calculate the number of years a donor has given over a period of time. In this case, 20.

 * @Author             : LPC
 * @Group              : 
 * @Last Modified By   : LPC
 * @Last Modified On   : 2/26/2020, 11:35:02 AM
 * @Modification Log   : 
 * Ver       Date    2/26/2020        Author      	LPC	    Modification
 * 1.3    2/26/2020   Initial Version
 Notes on the environment: 
 - You will need to create two opportunity contact role fields. One will be CloseDate and the other will be Fiscal_Year. You COULD 
 avoid this by doing a query of the opportunities as well - but that seemed a little unnecessary. 
 - CloseDate: Formula field - that looks up the close date of the related opportunity. 
 - Fiscal Year: Formula, Text field that calculates off the above CloseDate = TEXT(YEAR(DATEVALUE(CloseDate__c)))
 - There are a number of reasons I chose to put this on the Opportunity Contact Role Object, rather than the Opportunity/Contact/Account. 
 Known issue : when deleting an opportunity, it doesn't force an update. 
 **/
trigger CountUniqueYears20 on OpportunityContactRole (after insert,after update,after undelete){
    Set<String> contactIds = new set<String>();//create set on trigger( using a set so there are no duplicates)
    for(OpportunityContactRole ocr : Trigger.new){
        contactIds.add(ocr.ContactId);//For each affected role, check the contact Id - add it to the set. 
    } 
    List<AggregateResult> arList = [SELECT ContactId, COUNT_DISTINCT(Fiscal_Year__c) cnt 
                                    FROM OpportunityContactRole
                                    WHERE ContactId In :contactIds
                                    AND ((CloseDate__c = LAST_N_Years:20) OR (CloseDate__c = THIS_YEAR))
                                    AND ((Role = 'Donor') OR (Role = 'Household Member') OR (Role = 'Soft Credit'))
                                    GROUP BY ContactId];//query ocr for the appropriate counts.
    Map<Id, Decimal > resultMap = new Map<Id, Decimal>();//Create a map with the key being the contact ID & The new value is the year cnt from above.
    if(arList.isEmpty() == FALSE){ 
        for(AggregateResult ar : arList){
            resultMap.put((Id)ar.get('ContactId'),(Decimal)ar.get('cnt'));
        }//populate the map with the aggregate results
        List<Contact> contactsToUpdate = new List<Contact>();//create a list of contacts to update in bulk so we keep the queries low. Then update.
        for (Id key : resultMap.keySet()){
            contactsToUpdate.add(
                new Contact(
                    Id = key,
                    Years_Donated_Last_20__c = (Integer)resultMap.get(key)));
        }
        if(contactsToUpdate.size() > 0){
            update contactsToUpdate;
        } 
    }
}
